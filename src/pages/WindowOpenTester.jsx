import React, { useState } from "react";
import {
  ExternalLink,
  AlertCircle,
  CheckCircle,
  XCircle,
  Info,
} from "lucide-react";

const WindowOpenTester = () => {
  const [testUrl, setTestUrl] = useState("https://example.com");
  const [results, setResults] = useState([]);
  const [isBlocked, setIsBlocked] = useState(false);

  const addResult = (method, success, details = "") => {
    const timestamp = new Date().toLocaleTimeString();
    setResults((prev) => [
      ...prev,
      {
        id: Date.now(),
        method,
        success,
        details,
        timestamp,
        url: testUrl,
      },
    ]);
  };

  const clearResults = () => {
    setResults([]);
  };

  // Test basic window.open
  const testBasicOpen = () => {
    try {
      const newWindow = window.open(testUrl);
      if (newWindow) {
        addResult("Basic window.open()", true, "Window opened successfully");
      } else {
        addResult("Basic window.open()", false, "Popup blocked or failed");
        setIsBlocked(true);
      }
    } catch (error) {
      addResult("Basic window.open()", false, `Error: ${error.message}`);
    }
  };

  // Test with _blank target
  const testWithBlank = () => {
    try {
      const newWindow = window.open(testUrl, "_blank");
      if (newWindow) {
        addResult(
          "window.open() with _blank",
          true,
          "Window opened in new tab"
        );
      } else {
        addResult("window.open() with _blank", false, "Popup blocked");
        setIsBlocked(true);
      }
    } catch (error) {
      addResult("window.open() with _blank", false, `Error: ${error.message}`);
    }
  };

  // Test with window features
  const testWithFeatures = () => {
    try {
      const features =
        "width=800,height=600,scrollbars=yes,resizable=yes,toolbar=no,menubar=no";
      const newWindow = window.open(testUrl, "_blank", features);
      if (newWindow) {
        addResult(
          "window.open() with features",
          true,
          "Popup window opened with custom features"
        );
      } else {
        addResult("window.open() with features", false, "Popup blocked");
        setIsBlocked(true);
      }
    } catch (error) {
      addResult(
        "window.open() with features",
        false,
        `Error: ${error.message}`
      );
    }
  };

  // Test with noopener
  const testWithNoopener = () => {
    try {
      const features = "noopener,noreferrer";
      const newWindow = window.open(testUrl, "_blank", features);
      if (newWindow) {
        addResult("window.open() with noopener", true, "Secure window opened");
      } else {
        addResult(
          "window.open() with noopener",
          false,
          "Popup blocked or null returned"
        );
        setIsBlocked(true);
      }
    } catch (error) {
      addResult(
        "window.open() with noopener",
        false,
        `Error: ${error.message}`
      );
    }
  };

  // Test programmatic link click
  const testLinkClick = () => {
    try {
      const link = document.createElement("a");
      link.href = testUrl;
      link.target = "_blank";
      link.rel = "noopener noreferrer";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      addResult(
        "Programmatic link click",
        true,
        "Link clicked programmatically"
      );
    } catch (error) {
      addResult("Programmatic link click", false, `Error: ${error.message}`);
    }
  };

  // Test with user gesture simulation
  const testUserGesture = (e) => {
    try {
      // This should work because it's triggered by actual user interaction
      const newWindow = window.open(testUrl, "_blank");
      if (newWindow) {
        addResult(
          "User gesture window.open()",
          true,
          "Opened with real user interaction"
        );
      } else {
        addResult(
          "User gesture window.open()",
          false,
          "Still blocked despite user gesture"
        );
        setIsBlocked(true);
      }
    } catch (error) {
      addResult("User gesture window.open()", false, `Error: ${error.message}`);
    }
  };

  // Test delayed open (should fail)
  const testDelayedOpen = () => {
    addResult("Delayed window.open()", false, "Starting 2-second delay...");
    setTimeout(() => {
      try {
        const newWindow = window.open(testUrl, "_blank");
        if (newWindow) {
          addResult(
            "Delayed window.open()",
            true,
            "Surprisingly worked after delay"
          );
        } else {
          addResult(
            "Delayed window.open()",
            false,
            "Blocked - no user gesture"
          );
          setIsBlocked(true);
        }
      } catch (error) {
        addResult("Delayed window.open()", false, `Error: ${error.message}`);
      }
    }, 2000);
  };

  // Test with fetch then open (common async scenario)
  const testAsyncOpen = async () => {
    addResult("Async window.open()", false, "Testing async scenario...");
    try {
      // Simulate an API call
      await new Promise((resolve) => setTimeout(resolve, 500));
      const newWindow = window.open(testUrl, "_blank");
      if (newWindow) {
        addResult("Async window.open()", true, "Worked after async operation");
      } else {
        addResult(
          "Async window.open()",
          false,
          "Blocked after async operation"
        );
        setIsBlocked(true);
      }
    } catch (error) {
      addResult("Async window.open()", false, `Error: ${error.message}`);
    }
  };

  // Mobile-safe navigation using location.href
  const testLocationHref = () => {
    try {
      // Store current URL to potentially restore
      const currentUrl = window.location.href;
      addResult(
        "location.href navigation",
        true,
        `Navigating to ${testUrl} (will leave page)`
      );

      // Add a small delay so user can see the result
      setTimeout(() => {
        window.location.href = testUrl;
      }, 1000);
    } catch (error) {
      addResult("location.href navigation", false, `Error: ${error.message}`);
    }
  };

  // Test mobile-safe link with target="_blank" and proper handling
  const testMobileSafeLink = () => {
    try {
      const link = document.createElement("a");
      link.href = testUrl;
      link.target = "_blank";
      link.rel = "noopener noreferrer";

      // Mobile-specific: ensure proper touch event handling
      link.style.position = "absolute";
      link.style.left = "-9999px";
      document.body.appendChild(link);

      // Create and dispatch a proper click event
      const clickEvent = new MouseEvent("click", {
        view: window,
        bubbles: true,
        cancelable: true,
      });

      link.dispatchEvent(clickEvent);
      document.body.removeChild(link);

      addResult(
        "Mobile-safe link click",
        true,
        "Mobile-optimized link click executed"
      );
    } catch (error) {
      addResult("Mobile-safe link click", false, `Error: ${error.message}`);
    }
  };

  // Test with focus/blur handling (mobile responsiveness issue)
  const testWithFocusHandling = () => {
    try {
      // Add window focus/blur event listeners to detect the issue
      const handleVisibilityChange = () => {
        addResult(
          "Visibility change detected",
          true,
          `Document visibility: ${document.visibilityState}`
        );
      };

      const handleFocus = () => {
        addResult("Window focus detected", true, "App regained focus");
      };

      const handleBlur = () => {
        addResult("Window blur detected", true, "App lost focus");
      };

      document.addEventListener("visibilitychange", handleVisibilityChange);
      window.addEventListener("focus", handleFocus);
      window.addEventListener("blur", handleBlur);

      // Clean up after 10 seconds
      setTimeout(() => {
        document.removeEventListener(
          "visibilitychange",
          handleVisibilityChange
        );
        window.removeEventListener("focus", handleFocus);
        window.removeEventListener("blur", handleBlur);
      }, 10000);

      const newWindow = window.open(testUrl, "_blank");
      if (newWindow) {
        addResult(
          "Focus tracking window.open()",
          true,
          "Window opened - monitoring focus events for 10s"
        );
      } else {
        addResult("Focus tracking window.open()", false, "Window blocked");
      }
    } catch (error) {
      addResult(
        "Focus tracking window.open()",
        false,
        `Error: ${error.message}`
      );
    }
  };

  const commonUrls = [
    "https://example.com",
    "https://google.com",
    "https://github.com",
    "https://stackoverflow.com",
    "data:text/html,<h1>Hello World</h1>",
    'javascript:alert("Hello")',
    "about:blank",
  ];

  return (
    <div className="max-w-4xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 flex items-center">
          <ExternalLink className="mr-3" />
          Window.open() Testing Suite
        </h1>

        {/* URL Input */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Test URL:
          </label>
          <div className="flex gap-2 mb-2">
            <input
              type="url"
              value={testUrl}
              onChange={(e) => setTestUrl(e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter URL to test"
            />
            <button
              onClick={clearResults}
              className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
            >
              Clear Results
            </button>
          </div>

          <div className="flex flex-wrap gap-1">
            <span className="text-xs text-gray-600 mr-2">Quick URLs:</span>
            {commonUrls.map((url) => (
              <button
                key={url}
                onClick={() => setTestUrl(url)}
                className="text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
              >
                {url.length > 20 ? url.substring(0, 20) + "..." : url}
              </button>
            ))}
          </div>
        </div>

        {/* Popup Blocker Warning */}
        {isBlocked && (
          <div className="mb-6 p-4 bg-yellow-100 border border-yellow-400 rounded-md flex items-start">
            <AlertCircle
              className="text-yellow-600 mr-2 mt-0.5 flex-shrink-0"
              size={16}
            />
            <div className="text-sm text-yellow-800">
              <strong>Popup Blocker Detected:</strong> Some tests are being
              blocked. Try allowing popups for this site or testing in an
              incognito window.
            </div>
          </div>
        )}

        {/* Mobile Warning */}
        <div className="mb-6 p-4 bg-orange-100 border border-orange-400 rounded-md">
          <div className="flex items-start">
            <AlertCircle
              className="text-orange-600 mr-2 mt-0.5 flex-shrink-0"
              size={16}
            />
            <div className="text-sm text-orange-800">
              <strong>Mobile Users:</strong> If your app becomes unresponsive
              after using back button, this is a known mobile browser issue with
              window.open(). Try the mobile-safe alternatives below.
            </div>
          </div>
        </div>

        {/* Test Buttons */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          <button
            onClick={testBasicOpen}
            className="p-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-left"
          >
            <div className="font-medium">Basic Open</div>
            <div className="text-sm opacity-90">window.open(url)</div>
          </button>

          <button
            onClick={testWithBlank}
            className="p-4 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-left"
          >
            <div className="font-medium">With _blank</div>
            <div className="text-sm opacity-90">window.open(url, '_blank')</div>
          </button>

          <button
            onClick={testMobileSafeLink}
            className="p-4 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 transition-colors text-left"
          >
            <div className="font-medium">📱 Mobile-Safe Link</div>
            <div className="text-sm opacity-90">Optimized for mobile</div>
          </button>

          <button
            onClick={testLocationHref}
            className="p-4 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-colors text-left"
          >
            <div className="font-medium">📱 Same Tab Navigation</div>
            <div className="text-sm opacity-90">
              location.href (leaves page!)
            </div>
          </button>

          <button
            onClick={testWithFocusHandling}
            className="p-4 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition-colors text-left"
          >
            <div className="font-medium">📱 Focus Tracking</div>
            <div className="text-sm opacity-90">Monitor app responsiveness</div>
          </button>

          <button
            onClick={testWithFeatures}
            className="p-4 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors text-left"
          >
            <div className="font-medium">With Features</div>
            <div className="text-sm opacity-90">
              Custom window size/features
            </div>
          </button>

          <button
            onClick={testWithNoopener}
            className="p-4 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors text-left"
          >
            <div className="font-medium">With Noopener</div>
            <div className="text-sm opacity-90">Secure opening</div>
          </button>

          <button
            onClick={testLinkClick}
            className="p-4 bg-teal-500 text-white rounded-lg hover:bg-teal-600 transition-colors text-left"
          >
            <div className="font-medium">Link Click</div>
            <div className="text-sm opacity-90">
              Programmatic &lt;a&gt; click
            </div>
          </button>

          <button
            onClick={testUserGesture}
            className="p-4 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors text-left"
          >
            <div className="font-medium">User Gesture</div>
            <div className="text-sm opacity-90">With real click event</div>
          </button>

          <button
            onClick={testDelayedOpen}
            className="p-4 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-left"
          >
            <div className="font-medium">Delayed Open</div>
            <div className="text-sm opacity-90">2s delay (should fail)</div>
          </button>

          <button
            onClick={testAsyncOpen}
            className="p-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-left"
          >
            <div className="font-medium">Async Open</div>
            <div className="text-sm opacity-90">After Promise/fetch</div>
          </button>
        </div>

        {/* Results */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
            <Info className="mr-2" />
            Test Results ({results.length})
          </h2>

          {results.length === 0 ? (
            <p className="text-gray-600">
              No tests run yet. Click the buttons above to start testing.
            </p>
          ) : (
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {results.map((result) => (
                <div
                  key={result.id}
                  className={`p-3 rounded border-l-4 ${
                    result.success
                      ? "bg-green-50 border-green-400"
                      : "bg-red-50 border-red-400"
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-center">
                      {result.success ? (
                        <CheckCircle
                          className="text-green-600 mr-2 flex-shrink-0"
                          size={16}
                        />
                      ) : (
                        <XCircle
                          className="text-red-600 mr-2 flex-shrink-0"
                          size={16}
                        />
                      )}
                      <div>
                        <div className="font-medium text-gray-800">
                          {result.method}
                        </div>
                        <div className="text-sm text-gray-600">
                          {result.details}
                        </div>
                        {result.url !== "https://example.com" && (
                          <div className="text-xs text-gray-500 mt-1">
                            URL: {result.url}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className="text-xs text-gray-500">
                      {result.timestamp}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Tips */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <h3 className="font-medium text-blue-800 mb-2">
            💡 Mobile-Specific Issues & Solutions:
          </h3>
          <div className="text-sm text-blue-700 space-y-2">
            <div>
              <strong>🚨 App becomes unresponsive after back button:</strong>
              <ul className="ml-4 mt-1 space-y-1">
                <li>
                  • This happens because mobile browsers suspend/freeze the
                  original tab when opening new ones
                </li>
                <li>
                  • The React app's event listeners get detached or frozen
                </li>
                <li>
                  • Solution 1: Use same-tab navigation instead:{" "}
                  <code className="bg-blue-100 px-1 rounded">
                    window.location.href = url
                  </code>
                </li>
                <li>
                  • Solution 2: Add visibility change listeners to detect when
                  app regains focus
                </li>
                <li>• Solution 3: Warn users and provide refresh option</li>
              </ul>
            </div>

            <div>
              <strong>🔧 Code Solutions for your React app:</strong>
              <pre className="bg-blue-100 p-2 rounded mt-1 text-xs overflow-x-auto">
                {`// Option 1: Same tab navigation (safest for mobile)
const handleLinkClick = (url) => {
  window.location.href = url;
};

// Option 2: Detect when app regains focus
useEffect(() => {
  const handleVisibilityChange = () => {
    if (document.visibilityState === 'visible') {
      // Re-initialize event listeners or refresh state
      console.log('App regained focus');
    }
  };
  
  document.addEventListener('visibilitychange', handleVisibilityChange);
  return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
}, []);

// Option 3: Provide refresh button after external navigation
const [needsRefresh, setNeedsRefresh] = useState(false);

const handleExternalLink = (url) => {
  setNeedsRefresh(true);
  window.open(url, '_blank');
};`}
              </pre>
            </div>
          </div>
        </div>

        <div className="mt-4 p-4 bg-red-50 rounded-lg">
          <h3 className="font-medium text-red-800 mb-2">
            ⚠️ General Troubleshooting:
          </h3>
          <ul className="text-sm text-red-700 space-y-1">
            <li>
              • <strong>Popup blocked:</strong> Enable popups for this site in
              browser settings
            </li>
            <li>
              • <strong>User gesture required:</strong> window.open() must be
              called directly from user interaction
            </li>
            <li>
              • <strong>Async operations:</strong> Open the window first, then
              navigate:{" "}
              <code>const win = window.open(); win.location = url;</code>
            </li>
            <li>
              • <strong>Mobile browsers:</strong> Often ignore window features
              and may freeze original tab
            </li>
            <li>
              • <strong>iOS Safari:</strong> Particularly aggressive about
              blocking popups and freezing tabs
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default WindowOpenTester;
